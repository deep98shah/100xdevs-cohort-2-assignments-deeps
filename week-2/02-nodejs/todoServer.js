/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require("fs");
  const { randomUUID } = require('crypto');

  const app = express();
  
  app.use(bodyParser.json()); 

  const filePath = "C:\\Users\\deep9\\Documents\\0-100\\100xdevs-cohort-2-assignments-deeps\\week-2\\02-nodejs\\todos.json"

  app.get("/todos", (req, res) => {
    fs.readFile(filePath, (err, data) => {
      todosObj = JSON.parse(data)
      res.status(200).send(todosObj)
    })
  })

  app.get("/todos/:id", (req, res) => {
    fs.readFile(filePath, (err, data) => {
      const todosArray = JSON.parse(data)
      console.log(todosArray, typeof todosArray)
      const filteredArray = todosArray.filter((elem) => {
        return elem.id == req.params.id
      })
      if (filteredArray.length != 0) {
        res.status(200).send(todosArray[0])
      } else {
        res.sendStatus(404)
      }
    })
  })

  app.post("/todos", (req, res) => {
    const todoObject = req.body
    const id = randomUUID()
    const todo = Object.assign({}, {id: id}, todoObject)
    fs.readFile(filePath, (err, data) => {
      let todosArray = JSON.parse(data)
      todosArray.push(todo)
      fs.writeFile(filePath, JSON.stringify(todosArray), { flag: 'w+' }, () => {
        res.status(201).send({id: id})
      })
    })
  })

  app.put("/todos/:id", (req, res) => {
    const id = req.params.id
    console.log(id, typeof id)
    let updatedTodo = {}
    let todoIndex = -1
    fs.readFile(filePath, (err, data) => {
      const todosArray = JSON.parse(data)
      const todoBody = req.body
      todosArray.forEach(todo => {
        if (todo.id == id) {
          updatedTodo = Object.assign({}, todo, todoBody)
          todoIndex = todosArray.indexOf(todo)
        }
      });
      if (todoIndex == -1) {
        res.sendStatus(404)
      } else {
        todosArray[todoIndex] = updatedTodo
        console.log(todosArray)
        fs.writeFile(filePath, JSON.stringify(todosArray), (err) => {
          res.sendStatus(200)
        })
      }
    })
  })

  app.delete("/todos/:id", (req, res) => {
    const id = req.params.id
    let itemIndex = -1
    fs.readFile(filePath, (err, data) => {
      const todosArray = JSON.parse(data)
      todosArray.forEach(todo => {
        if (todo.id == id) {
          itemIndex = todosArray.indexOf(todo)
        }
      });
      if (itemIndex == -1) {
        res.sendStatus(404)
      } else {
        todosArray.splice(itemIndex, 1)
        fs.writeFile(filePath, JSON.stringify(todosArray), (err) => {
          res.sendStatus(200)
        })
      }
    })
  })

  // app.listen(3000, () => {
  //   console.log("Server listening on port 3000")
  // })
  
  module.exports = app;